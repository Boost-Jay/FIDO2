// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"fido2/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) CreateUser(user *entity.User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*entity.User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user *entity.User
func (_e *MockUserRepository_Expecter) CreateUser(user interface{}) *MockUserRepository_CreateUser_Call {
	return &MockUserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *MockUserRepository_CreateUser_Call) Run(run func(user *entity.User)) *MockUserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *entity.User
		if args[0] != nil {
			arg0 = args[0].(*entity.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) Return(err error) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) RunAndReturn(run func(user *entity.User) error) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) DeleteUser(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserRepository_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - id string
func (_e *MockUserRepository_Expecter) DeleteUser(id interface{}) *MockUserRepository_DeleteUser_Call {
	return &MockUserRepository_DeleteUser_Call{Call: _e.mock.On("DeleteUser", id)}
}

func (_c *MockUserRepository_DeleteUser_Call) Run(run func(id string)) *MockUserRepository_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepository_DeleteUser_Call) Return(err error) *MockUserRepository_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_DeleteUser_Call) RunAndReturn(run func(id string) error) *MockUserRepository_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByChallenge provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUserByChallenge(challenge string) (*entity.User, error) {
	ret := _mock.Called(challenge)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByChallenge")
	}

	var r0 *entity.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*entity.User, error)); ok {
		return returnFunc(challenge)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = returnFunc(challenge)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(challenge)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUserByChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByChallenge'
type MockUserRepository_GetUserByChallenge_Call struct {
	*mock.Call
}

// GetUserByChallenge is a helper method to define mock.On call
//   - challenge string
func (_e *MockUserRepository_Expecter) GetUserByChallenge(challenge interface{}) *MockUserRepository_GetUserByChallenge_Call {
	return &MockUserRepository_GetUserByChallenge_Call{Call: _e.mock.On("GetUserByChallenge", challenge)}
}

func (_c *MockUserRepository_GetUserByChallenge_Call) Run(run func(challenge string)) *MockUserRepository_GetUserByChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepository_GetUserByChallenge_Call) Return(user *entity.User, err error) *MockUserRepository_GetUserByChallenge_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetUserByChallenge_Call) RunAndReturn(run func(challenge string) (*entity.User, error)) *MockUserRepository_GetUserByChallenge_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUserByID(id string) (*entity.User, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *entity.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*entity.User, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockUserRepository_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - id string
func (_e *MockUserRepository_Expecter) GetUserByID(id interface{}) *MockUserRepository_GetUserByID_Call {
	return &MockUserRepository_GetUserByID_Call{Call: _e.mock.On("GetUserByID", id)}
}

func (_c *MockUserRepository_GetUserByID_Call) Run(run func(id string)) *MockUserRepository_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepository_GetUserByID_Call) Return(user *entity.User, err error) *MockUserRepository_GetUserByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetUserByID_Call) RunAndReturn(run func(id string) (*entity.User, error)) *MockUserRepository_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUserByUsername(username string) (*entity.User, error) {
	ret := _mock.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *entity.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*entity.User, error)); ok {
		return returnFunc(username)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = returnFunc(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockUserRepository_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - username string
func (_e *MockUserRepository_Expecter) GetUserByUsername(username interface{}) *MockUserRepository_GetUserByUsername_Call {
	return &MockUserRepository_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", username)}
}

func (_c *MockUserRepository_GetUserByUsername_Call) Run(run func(username string)) *MockUserRepository_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepository_GetUserByUsername_Call) Return(user *entity.User, err error) *MockUserRepository_GetUserByUsername_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetUserByUsername_Call) RunAndReturn(run func(username string) (*entity.User, error)) *MockUserRepository_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUsers() ([]*entity.User, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []*entity.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*entity.User, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*entity.User); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockUserRepository_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
func (_e *MockUserRepository_Expecter) GetUsers() *MockUserRepository_GetUsers_Call {
	return &MockUserRepository_GetUsers_Call{Call: _e.mock.On("GetUsers")}
}

func (_c *MockUserRepository_GetUsers_Call) Run(run func()) *MockUserRepository_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserRepository_GetUsers_Call) Return(users []*entity.User, err error) *MockUserRepository_GetUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockUserRepository_GetUsers_Call) RunAndReturn(run func() ([]*entity.User, error)) *MockUserRepository_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) UpdateUser(user *entity.User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*entity.User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserRepository_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - user *entity.User
func (_e *MockUserRepository_Expecter) UpdateUser(user interface{}) *MockUserRepository_UpdateUser_Call {
	return &MockUserRepository_UpdateUser_Call{Call: _e.mock.On("UpdateUser", user)}
}

func (_c *MockUserRepository_UpdateUser_Call) Run(run func(user *entity.User)) *MockUserRepository_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *entity.User
		if args[0] != nil {
			arg0 = args[0].(*entity.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepository_UpdateUser_Call) Return(err error) *MockUserRepository_UpdateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_UpdateUser_Call) RunAndReturn(run func(user *entity.User) error) *MockUserRepository_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}